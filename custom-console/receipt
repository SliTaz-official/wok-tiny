# SliTaz package receipt.

PACKAGE="custom-console"
VERSION="2.0"
CATEGORY="meta"
GROUP="system"
SHORT_DESC="Configure the consoles"
MAINTAINER="pascal.bellard@slitaz.org"
LICENSE="BSD"
WEB_SITE="http://tiny.slitaz.org/"
DEPENDS="base-tiny"
SUGGESTED="module-usbserial module-serial"

# Rules to gen a SliTaz package suitable for Tazpkg.
genpkg_rules()
{
	mkdir -p $fs/etc/init.d
}

post_install()
{
	respawn=respawn
	[ "$ASKFIRST" ] && respawn=askfirst
	[ "$KERNEL_TTY" == "none" ] ||
	echo -n " console=tty0 console=$KERNEL_TTY,${SPEED_KERNEL_TTY}n8" \
		>> $1/boot/cmdline
	TTY_LIST=""
	for i in $(seq 1 63); do
		eval n=\$TTY$i
		[ -n "$n" ] || continue
		TTY_LIST="$TTY_LIST tty$i:38400"
	done
	for i in $(seq 0 3 | sed 's/^/TTYS/' ; seq 0 3 | sed 's/^/TTYUSB/'); do
		eval n=\$$i
		[ -n "$n" ] || continue
		eval s=\$SPEED_$i
		TTY_LIST="$TTY_LIST ${i/TTY/tty}:$s"
	done
	[ -s $1/etc/init.d/tty.sh ] || cat > $1/etc/init.d/tty.sh <<EOT
#!/bin/sh

. /etc/init.d/rc.functions
EOT
	chmod +x $1/etc/init.d/tty.sh
	cat >> $1/etc/init.d/tty.sh <<EOT

sed -i '/^tty/d' /etc/inittab
EOT
	[ -n "$TTY_LIST" ] ||
	echo 'echo -n "Disable login console"' >> $1/etc/init.d/tty.sh
	[ -n "$TTY_LIST" ] && cat >> $1/etc/init.d/tty.sh <<EOT
echo -n "Enable login console from "
for i in$TTY_LIST; do
	dev=\${i%:*}
	major=4
	minor=\$(echo \$dev | sed 's/[^0-9]*//')
	case "\$dev" in
	ttyUSB*) major=188 ;;
	ttyS*)	 minor=\$((64+\$minor)) ;;
	esac
	[ -e /dev/\$dev ] || mknod /dev/\$dev c \$major \$minor
	stty -F /dev/\$dev > /dev/null 2>&1 || continue
	echo -n "\$dev "
	echo "\$dev::$respawn:getty \${i#*:} /dev/\$dev" >> /etc/inittab
done
kill -1 1
status
EOT
	grep tty.sh $1/etc/rcS.conf ||
	sed -i 's/^RUN_SCRIPTS="/&tty.sh /' $1/etc/rcS.conf
}

config_form()
{
	cat <<EOT
<hr />
Virtual consoles
<table>
EOT
	for i in $(seq 1 63); do
		[ $(($i & 7)) -eq 1 ] && echo "<tr>"
		eval checked="\$TTY$i"
		cat <<EOT
<td>
<input type="checkbox" name="TTY$i" ${checked:+checked=checked }/> tty$i
</td>
EOT
		[ $(($i & 7)) -eq 0 ] && echo "</tr>"
	done
	cat <<EOT
<td></td>
</tr>
</table>
<hr />
Serial consoles
<table>
EOT
	for i in $(seq 0 3 | sed 's/^/TTYS/' ; seq 0 3 | sed 's/^/TTYUSB/'); do
		eval checked="\$$i"
		cat <<EOT
<tr>
<td><input type="checkbox" name="$i" ${checked:+checked=checked }/> ${i/TTY/tty} </td>
EOT
		eval speed="\$SPEED_$i"
		for j in 115200 57600 38400 19200 9600 4800 2400 1200 600 300; do
			[ $j -eq 4800 ] && cat <<EOT
</tr>
<tr>
<td></td>
EOT
			checked=
			case " ${speed:-9600} " in
			*\ $j\ *) checked="checked=checked "
			esac
			cat <<EOT
<td><input type="checkbox" name="SPEED_$i[]" value="$j" $checked/> $j</td>
EOT
		done
	done
	cat <<EOT
</table>
</tr>
<p>
<input type="checkbox" name="ASKFIRST" ${ASKFIRST:+checked=checked }/>
Confirm console launch (spare some memory)
</p>
<p>
Kernel serial console 
<select name="KERNEL_TTY">
<option>none</option>
EOT
	for i in $(seq 0 3); do
		echo -n "<option"
		[ "$KERNEL_TTY" == "ttyS$i" ] && echo -n ' selected="selected"'
		echo ">ttyS$i</option>"
	done
	cat <<EOT
</select>
<select name="SPEED_KERNEL_TTY">
EOT
	for i in 115200 57600 38400 19200 9600 4800 2400 1200 600 300; do
		echo -n "<option"
		[ "$SPEED_KERNEL_TTY" == "$i" ] && echo -n ' selected="selected"'
		echo ">$i</option>"
	done
	echo -e "</select>\n</p>"
}
